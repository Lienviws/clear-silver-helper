name: clearSilver extension
scopeName: source.csr
fileTypes: [csr]
patterns:
  # 注释
  - name: comment.block.cs
    begin: <\?cs\s+#
    end: \s*(\?>)
    captures:
      '0': { name: punctuation.definition.comment.cs }
  # 单行标记
  - name: meta.tag.any.html.cs-single
    begin: (<\?)(cs)\s+(?!if|each|with|loop|alt|def)
    beginCaptures:
      '1': { name: punctuation.definition.tag.begin.cs }
      '2': { name: entity.name.tag.template.cs }
    # 空格或者换行开头
    end: \s*(\?>)
    endCaptures:
      '1': { name: punctuation.definition.tag.end.cs }
    patterns:
      - include: '#cs-commands-single'
  # 多行语法标记
  - name: meta.tag.any.html.cs-multi
    begin: (<\?)(cs)\s+(?=if|each|with|loop|alt|def)
    beginCaptures:
      '1': { name: punctuation.definition.tag.begin.cs.mult }
      '2': { name: entity.name.tag.template.cs.mult }
    end: (?:\s|^)(\?>)
    endCaptures:
      '1': { name: punctuation.definition.tag.end.cs.mult }
    patterns:
      - include: '#cs-commands-mult'
  # - include: 'text.html.basic'
# -------------------------------- responsitory ------------------------------------
repository:
  cs-commands-single:
    name: keyword.commands.single
    patterns:
      - include: '#command-var'
      - include: '#command-set'
      - include: '#command-name'
      - include: '#command-include'
      - include: '#command-call'
  cs-commands-mult:
    name: keyword.commands.mult
    patterns:
      - include: '#command-if'
      - include: '#command-alt'
      - include: '#command-with'
      - include: '#command-loop'
      - include: '#command-each'
      - include: '#command-def'
  # -------------------------------- single ------------------------------------
  # var
  command-var:
    name: meta.namespace.var
    begin: (var)(:)
    beginCaptures:
      '1': { name: storage.type.var }
      '2': { name: punctuation.separator.key-value.csr }
    end: (?=\s*\?>)
    patterns:
      - include: '#expression'
  # set
  command-set:
    name: meta.namespace.set
    begin: (set)(:)
    beginCaptures:
      '1': { name: keyword.commands.set }
      '2': { name: punctuation.separator.key-value.csr }
    end: (?=\s*\?>)
    patterns:
      - include: '#expression'
  # name
  command-name:
    name: meta.namespace.name
    match: (name)(:)([a-zA-Z0-9._]+)
    captures:
      '1': { name: storage.type.name }
      '2': { name: punctuation.separator.key-value.csr }
      '3': { name: variable.other.readwrite }
  # include
  command-include:
    name: meta.namespace.include
    match: '(include)(:)(''|")([a-zA-Z0-9._]+)(''|")'
    captures:
      '1': { name: keyword.commands.include }
      '2': { name: punctuation.separator.key-value.csr }
      '3': { name: string.quoted.double.html }
      '4': { name: string.value }
      '5': { name: string.quoted.double.html }
  # call
  command-call:
    name: meta.namespace.call
    begin: (call)(:)
    beginCaptures:
      '1': { name: keyword.commands.call }
      '2': { name: punctuation.separator.key-value.csr }
    end: (?=\s*\?>)
    patterns:
      - include: '#function-call'
  # -------------------------------- mult ------------------------------------
  # if
  command-if:
    name: meta.tag.if
    begin: '(if)(:)'
    beginCaptures:
      '1': { name: keyword.control.if.start } 
      '2': { name: punctuation.separator.key-value.csr }
    end: (?<=<\?cs)\s+(/if)
    endCaptures:
      '1': { name: keyword.control.if.end }
    patterns:
      - begin: (?<=if:)
        end: (?=\?>)
        patterns:
          - include: '#expression'
      - begin: (\?>)
        beginCaptures: 
          '1': { name: punctuation.definition.tag.end.cs.inner }
        end: (<\?)(cs)(?=\s/if)
        endCaptures:
          '1': { name: punctuation.definition.tag.begin.cs.inner }
          '2': { name: entity.name.tag.template.cs.inner }
        # else if
        patterns:
          - name: meta.tag.elseif
            begin: '(<\?)(cs)\s+(elif)(:)'
            beginCaptures:
              '1': { name: punctuation.definition.tag.begin.cs.elif }
              '2': { name: entity.name.tag.template.cs.elif }
              '3': { name: keyword.control.elif }
              '4': { name: punctuation.separator.key-value.csr }
              '5': { name: string.value }
            end: (?:\s*|^)(\?>)
            endCaptures:
              '1': { name: punctuation.definition.tag.end.cs.elif }
            patterns:
              - begin: (?<=elif:)
                end: (?=\?>)
                patterns:
                  - include: '#expression'
        # else
          - name: meta.tag.else
            begin: '(<\?)(cs)\s+(else)'
            beginCaptures:
              '1': { name: punctuation.definition.tag.begin.cs.else }
              '2': { name: entity.name.tag.template.cs.else }
              '3': { name: keyword.control.else }
            end: (?:\s|^)(\?>)
            endCaptures:
              '1': { name: punctuation.definition.tag.end.cs.else }
          - include: 'source.csr'
  # alt
  command-alt:
    name: meta.tag.alt
    begin: (alt)(:)
    beginCaptures:
      '1': { name: keyword.control.alt.start } 
      '2': { name: punctuation.separator.key-value.csr }
      '3': { name: string.value }
      '4': { name: punctuation.definition.tag.end.cs.inner }
    end: (<\?)(cs)\s+(/alt)
    endCaptures:
      '1': { name: punctuation.definition.tag.begin.cs.inner }
      '2': { name: entity.name.tag.template.cs.inner }
      '3': { name: keyword.control.alt.end }
    patterns:
      - begin: (?<=alt:)
        end: (?=\?>)
        patterns:
          - include: '#expression'
      - match: (\?>)
        captures: 
          '1': { name: punctuation.definition.tag.end.cs.inner }
  # with
  command-with:
    name: meta.tag.with
    begin: (with)(:)
    beginCaptures:
      '1': { name: keyword.control.with.start } 
      '2': { name: punctuation.separator.key-value.csr }
    end: (?<=<\?cs)\s+(/with)
    endCaptures:
      '1': { name: keyword.control.with.end }
    patterns:
      - begin: (\?>)
        beginCaptures: 
          '1': { name: punctuation.definition.tag.end.cs.inner }
        end: (<\?)(cs)(?=\s/with)
        endCaptures:
          '1': { name: punctuation.definition.tag.begin.cs.inner }
          '2': { name: entity.name.tag.template.cs.inner }
        patterns:
          - include: 'source.csr'
      - include: '#expression'
  # loop
  command-loop:
    name: meta.tag.loop
    begin: (loop)(:)
    beginCaptures:
      '1': { name: keyword.control.loop.start } 
      '2': { name: punctuation.separator.key-value.csr }
    end: (?<=<\?cs)\s+(/loop)
    endCaptures:
      '1': { name: keyword.control.loop.end }
    patterns:
      - begin: (\?>)
        beginCaptures: 
          '1': { name: punctuation.definition.tag.end.cs.inner }
        end: (<\?)(cs)(?=\s/loop)
        endCaptures:
          '1': { name: punctuation.definition.tag.begin.cs.inner }
          '2': { name: entity.name.tag.template.cs.inner }
        patterns:
          - include: 'source.csr'
      - include: '#expression'
  # each
  command-each:
    name: meta.tag.each
    begin: (each)(:)
    beginCaptures:
      '1': { name: keyword.control.each.start } 
      '2': { name: punctuation.separator.key-value.csr }
    end: (?<=<\?cs)\s+(/each)
    endCaptures:
      '1': { name: keyword.control.each.end }
    patterns:
      - begin: (\?>)
        beginCaptures: 
          '1': { name: punctuation.definition.tag.end.cs.inner }
        end: (<\?)(cs)(?=\s/each)
        endCaptures:
          '1': { name: punctuation.definition.tag.begin.cs.inner }
          '2': { name: entity.name.tag.template.cs.inner }
        patterns:
          - include: 'source.csr'
      - include: '#expression'
  # def
  command-def:
    name: meta.tag.def
    begin: (def)(:)
    beginCaptures:
      '1': { name: keyword.control.def.start } 
      '2': { name: punctuation.separator.key-value.csr }
    end: (?<=<\?cs)\s+(/def)
    endCaptures:
      '1': { name: keyword.control.def.end }
    patterns:
      - name: meta.function.csr
        begin: ([a-zA-Z0-9_]+)\s*(\()\s*
        beginCaptures:
          '1': { name: entity.name.function.csr }
          '2': { name: punctuation.definition.parameters.start }
        end: \s*(\))\s*
        endCaptures:
          '1': { name: punctuation.definition.parameters.end }
        patterns:
          - name: meta.parameters.csr
            match: (\s*(?:[a-zA-Z0-9_]+)(,)?)
            captures:
              '1': { name: variable.parameter.csr }
              '2': { name: punctuation.separator.comma.csr }
      - begin: (\?>)
        beginCaptures: 
          '1': { name: punctuation.definition.tag.end.cs.inner }
        end: (<\?)(cs)(?=\s/def)
        endCaptures:
          '1': { name: punctuation.definition.tag.begin.cs.inner }
          '2': { name: entity.name.tag.template.cs.inner }
        patterns:
          - include: 'source.csr'
  # -------------------------------- expression ------------------------------------
  # 表达式
  expression:
    patterns:
      - include: 'source.js#string'
      - include: 'source.js#identifiers'
      - include: '#expression-operators'
      - include: '#literal'
      - include: '#function-call'
      - include: 'source.js#punctuation-comma'
  # 方法调用
  function-call:
    patterns:
      - begin: (?<=call:)
        end: (?=(\)\s*$)|(\?>))
        patterns:
          - begin: '(?<=call:)'
            end: (?:\()
            patterns:
              - include: 'source.js#identifiers'
          - begin: (?<=\()
            end: (?=(\)\s*$)|(\?>))
            patterns:
              - include: '#expression'
  # 计算符号
  expression-operators:
    patterns:
      - name: keyword.operator.logical.csr
        match: '\!|&&|\|\|'
      - name: keyword.operator.comparison.csr
        match: '==|\!='
      - name: keyword.operator.relational.csr
        match: '>|>=|<|<='
      - name: keyword.operator.arithmetic.csr
        match: '\+|-|\*|/|%'
      - name: keyword.operator.convert.csr
        match: '#|\$'
      - name: keyword.operator.existance.csr
        match: '\?'
  # 基本类型值
  literal:
    patterns:
      - name: 'constant.numeric.decimal.csr'
        match: ([0-9])
      - include: 'source.js#array-literal'